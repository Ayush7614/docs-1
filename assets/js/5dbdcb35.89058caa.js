"use strict";(self.webpackChunkkeploy_docs=self.webpackChunkkeploy_docs||[]).push([[5867],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),g=u(n),d=o,f=g["".concat(l,".").concat(d)]||g[d]||p[d]||i;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},8215:function(e,t,n){n(7294)},9877:function(e,t,n){n(7294),n(2389),n(3725)},1315:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=(n(8215),n(9877),["components"]),s={id:"integration-with-go-test",title:"Integrate with Go Test",sidebar_label:"Integrate with Go Test"},l=void 0,u={unversionedId:"go/integration-with-go-test",id:"go/integration-with-go-test",title:"Integrate with Go Test",description:"Testing using Unit Test File",source:"@site/docs/go/integration-with-go-test.md",sourceDirName:"go",slug:"/go/integration-with-go-test",permalink:"/docs/go/integration-with-go-test",editUrl:"https://github.com/keploy/docs/blob/master/docs/go/integration-with-go-test.md",tags:[],version:"current",frontMatter:{id:"integration-with-go-test",title:"Integrate with Go Test",sidebar_label:"Integrate with Go Test"},sidebar:"sidebarGo",previous:{title:"Supported Frameworks",permalink:"/docs/go/supported-frameworks"},next:{title:"QuickStart",permalink:"/docs/go/run-your-first-app-tutorial"}},c={},p=[{value:"Testing using Unit Test File",id:"testing-using-unit-test-file",level:3}],g={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"testing-using-unit-test-file"},"Testing using Unit Test File"),(0,i.kt)("p",null,"Once you have testcases captured, add this go unit test file ",(0,i.kt)("inlineCode",{parentName:"p"},"main_test.go")," in the root of your sample application."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'  package main\n  \n  import (\n    "github.com/keploy/go-sdk/keploy"\n    "testing"\n  )\n  \n  func TestKeploy(t *testing.T) {\n      keploy.SetTestMode()\n      go main()\n      keploy.AssertTests(t)\n}\n')),(0,i.kt)("p",null,"To automatically download and run the captured test-cases. Let's run the test-file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"}," go test -coverpkg=./... -covermode=atomic  ./...\n")),(0,i.kt)("p",null,"output should look like -"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"ok      test-app-url-shortener  6.268s  coverage: 80.3% of statements in ./...\n")),(0,i.kt)("p",null,"You'll see the total test-coverage of Keploy recorded test-cases and previously written unit-test cases(if any). "),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"You can use this unit-test file and there's no-need to add any additional steps/checks in your CI pipeline.")))}d.isMDXComponent=!0}}]);