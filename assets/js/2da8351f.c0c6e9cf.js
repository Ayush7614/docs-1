"use strict";(self.webpackChunkkeploy_docs=self.webpackChunkkeploy_docs||[]).push([[4588],{3905:function(e,t,o){o.d(t,{Zo:function(){return c},kt:function(){return m}});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function l(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?l(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):l(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)o=l[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)o=l[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var s=r.createContext({}),u=function(e){var t=r.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(o),m=n,b=d["".concat(s,".").concat(m)]||d[m]||p[m]||l;return o?r.createElement(b,a(a({ref:t},c),{},{components:o})):r.createElement(b,a({ref:t},c))}));function m(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=o.length,a=new Array(l);a[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,a[1]=i;for(var u=2;u<l;u++)a[u]=o[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,o)}d.displayName="MDXCreateElement"},8215:function(e,t,o){o(7294)},9877:function(e,t,o){o(7294),o(2389),o(3725)},96:function(e,t,o){o.r(t),o.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return p}});var r=o(7462),n=o(3366),l=(o(7294),o(3905)),a=(o(8215),o(9877),["components"]),i={id:"ui-contrib-guide",title:"Keploy UI Contribution Guide",label:"UI Contribution Guide"},s=void 0,u={unversionedId:"devtools/ui-contrib-guide",id:"devtools/ui-contrib-guide",title:"Keploy UI Contribution Guide",description:"Make sure you're using Node version 14.x.x",source:"@site/docs/devtools/web-ui.md",sourceDirName:"devtools",slug:"/devtools/ui-contrib-guide",permalink:"/docs/devtools/ui-contrib-guide",editUrl:"https://github.com/keploy/docs/blob/master/docs/devtools/web-ui.md",tags:[],version:"current",frontMatter:{id:"ui-contrib-guide",title:"Keploy UI Contribution Guide",label:"UI Contribution Guide"}},c={},p=[{value:"1. Start the Keploy Server",id:"1-start-the-keploy-server",level:3},{value:"2. Start the Keploy Console/UI",id:"2-start-the-keploy-consoleui",level:3},{value:"Install mongo-database-tools",id:"install-mongo-database-tools",level:4},{value:"Restore DB",id:"restore-db",level:4}],d={toc:p};function m(e){var t=e.components,o=(0,n.Z)(e,a);return(0,l.kt)("wrapper",(0,r.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Make sure you're using ",(0,l.kt)("strong",{parentName:"p"},"Node version 14.x.x")),(0,l.kt)("h3",{id:"1-start-the-keploy-server"},"1. Start the Keploy Server"),(0,l.kt)("p",null,"There's a separate ",(0,l.kt)("a",{parentName:"p",href:"docker-compose-dev.yaml"},"docker-compose")," file which helps which exposes the mongo server and also builds the dockerfile from local code.  The ",(0,l.kt)("inlineCode",{parentName:"p"},"build")," flag ensures that the binary is built again to reflect the latest code changes. There's also ",(0,l.kt)("a",{parentName:"p",href:"docker-compose-debug.yaml"},"docker-compose-debug.yaml")," which can help remote debugging the go server on port 4000."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"git clone https://github.com/keploy/keploy.git && cd keploy\ndocker-compose -f docker-compose-dev.yaml up --build\n")),(0,l.kt)("h3",{id:"2-start-the-keploy-consoleui"},"2. Start the Keploy Console/UI"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"git clone https://github.com/keploy/ui.git && cd ui\nnpm i \n")),(0,l.kt)("p",null,"For development, we'll add the API URL as local keploy server url running at http://localhost:8081"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"export GATSBY_API_URL=http://localhost:8081/api\n")),(0,l.kt)("p",null,"Now let's start the Gatsby Server"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"gatsby develop\n")),(0,l.kt)("p",null,"If you make some UI/design changes and want to add test data. In the new directory, clone test data repo :"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"git clone https://github.com/keploy/test-data.git && cd test-data\n")),(0,l.kt)("p",null,"Within test-data directory"),(0,l.kt)("h4",{id:"install-mongo-database-tools"},"Install mongo-database-tools"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"brew tap mongodb/brew\nbrew install mongodb-database-tools\n")),(0,l.kt)("h4",{id:"restore-db"},"Restore DB"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"mongorestore  dump/\n")),(0,l.kt)("p",null,"You should now be able to see test data on the UI."))}m.isMDXComponent=!0}}]);