"use strict";(self.webpackChunkkeploy_docs=self.webpackChunkkeploy_docs||[]).push([[9942],{3905:function(e,r,t){t.d(r,{Zo:function(){return u},kt:function(){return g}});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=n.createContext({}),s=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},u=function(e){var r=s(e.components);return n.createElement(l.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(t),g=o,f=d["".concat(l,".").concat(g)]||d[g]||p[g]||a;return t?n.createElement(f,i(i({ref:r},u),{},{components:t})):n.createElement(f,i({ref:r},u))}));function g(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var c={};for(var l in r)hasOwnProperty.call(r,l)&&(c[l]=r[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=t[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8215:function(e,r,t){t(7294)},9877:function(e,r,t){t(7294),t(2389),t(3725)},483:function(e,r,t){t.r(r),t.d(r,{assets:function(){return u},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return p}});var n=t(7462),o=t(3366),a=(t(7294),t(3905)),i=(t(8215),t(9877),["components"]),c={id:"server-contrib-guide",title:"Keploy Server Contribution Guide",label:"Server Contribution Guide"},l=void 0,s={unversionedId:"devtools/server-contrib-guide",id:"devtools/server-contrib-guide",title:"Keploy Server Contribution Guide",description:"There's a separate docker-compose file which helps with exposing the mongo server and also builds the dockerfile from local code.  The build flag ensures that the binary is built again to reflect the latest code changes. There's also docker-compose-debug.yaml which can help remote debugging the go server on port 40000.",source:"@site/docs/devtools/server.md",sourceDirName:"devtools",slug:"/devtools/server-contrib-guide",permalink:"/docs/devtools/server-contrib-guide",editUrl:"https://github.com/keploy/docs/blob/master/docs/devtools/server.md",tags:[],version:"current",frontMatter:{id:"server-contrib-guide",title:"Keploy Server Contribution Guide",label:"Server Contribution Guide"}},u={},p=[],d={toc:p};function g(e){var r=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"There's a separate ",(0,a.kt)("a",{parentName:"p",href:"docker-compose-dev.yaml"},"docker-compose")," file which helps with exposing the mongo server and also builds the dockerfile from local code.  The ",(0,a.kt)("inlineCode",{parentName:"p"},"build")," flag ensures that the binary is built again to reflect the latest code changes. There's also ",(0,a.kt)("a",{parentName:"p",href:"docker-compose-debug.yaml"},"docker-compose-debug.yaml")," which can help remote debugging the go server on port 40000."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"docker-compose -f docker-compose-dev.yaml up --build\n")),(0,a.kt)("p",null,"If you are not using docker, you can build and run the keploy server directly. Ensure to provide the Mongo connection string via the ",(0,a.kt)("inlineCode",{parentName:"p"},"KEPLOY_MONGO_URI")," env variable."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'export KEPLOY_MONGO_URI="mongodb://mongo:27017"\ngo run cmd/server/main.go\n')),(0,a.kt)("p",null,"Keploy exposes GraphQL API for the frontend based on ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/99designs/gqlgen"},"gqlgen"),". After changing the ",(0,a.kt)("a",{parentName:"p",href:"graph/schema.graphqls"},"schema")," you can autogenerate graphQL ",(0,a.kt)("a",{parentName:"p",href:"graph/schema.resolvers.go"},"handlers")," using"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"go generate ./...\n")))}g.isMDXComponent=!0}}]);