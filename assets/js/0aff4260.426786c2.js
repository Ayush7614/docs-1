"use strict";(self.webpackChunkkeploy_docs=self.webpackChunkkeploy_docs||[]).push([[6153],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return g}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),s=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=s(n),g=o,m=d["".concat(i,".").concat(g)]||d[g]||c[g]||a;return n?r.createElement(m,l(l({ref:t},u),{},{components:n})):r.createElement(m,l({ref:t},u))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=d;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p.mdxType="string"==typeof e?e:o,l[1]=p;for(var s=2;s<a;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8215:function(e,t,n){n(7294)},9877:function(e,t,n){n(7294),n(2389),n(3725)},5621:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return i},default:function(){return g},frontMatter:function(){return p},metadata:function(){return s},toc:function(){return c}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),l=(n(8215),n(9877),["components"]),p={id:"supported-frameworks",title:"Supported Frameworks for Go",sidebar_label:"Supported Frameworks",description:"Keploy platform automatically mocks application dependencies and safely replay writes. It does accurate noise detection and statistical de-duplication.",tags:["go","developer-guide"]},i=void 0,s={unversionedId:"go/supported-frameworks",id:"go/supported-frameworks",title:"Supported Frameworks for Go",description:"Keploy platform automatically mocks application dependencies and safely replay writes. It does accurate noise detection and statistical de-duplication.",source:"@site/docs/go/supported-frameworks.md",sourceDirName:"go",slug:"/go/supported-frameworks",permalink:"/docs/go/supported-frameworks",editUrl:"https://github.com/keploy/docs/blob/master/docs/go/supported-frameworks.md",tags:[{label:"go",permalink:"/docs/tags/go"},{label:"developer-guide",permalink:"/docs/tags/developer-guide"}],version:"current",frontMatter:{id:"supported-frameworks",title:"Supported Frameworks for Go",sidebar_label:"Supported Frameworks",description:"Keploy platform automatically mocks application dependencies and safely replay writes. It does accurate noise detection and statistical de-duplication.",tags:["go","developer-guide"]},sidebar:"sidebarGo",previous:{title:"Integration",permalink:"/docs/go/installation"},next:{title:"Integrate with Go Test",permalink:"/docs/go/integration-with-go-test"}},u={},c=[{value:"Supported Routers",id:"supported-routers",level:2},{value:"1. Chi",id:"1-chi",level:3},{value:"Example",id:"example",level:4},{value:"2. Gin",id:"2-gin",level:3},{value:"Example",id:"example-1",level:4},{value:"3. Echo",id:"3-echo",level:3},{value:"Example",id:"example-2",level:4},{value:"4. WebGo",id:"4-webgo",level:3},{value:"WebGoV4",id:"webgov4",level:4},{value:"WebGoV6",id:"webgov6",level:4},{value:"Example",id:"example-3",level:4},{value:"5. Gorilla/Mux",id:"5-gorillamux",level:3},{value:"Example",id:"example-4",level:4},{value:"Supported Databases",id:"supported-databases",level:2},{value:"1. MongoDB",id:"1-mongodb",level:3},{value:"2. DynamoDB",id:"2-dynamodb",level:3},{value:"3. SQL Driver",id:"3-sql-driver",level:3},{value:"Supported Clients",id:"supported-clients",level:2},{value:"net/http",id:"nethttp",level:3},{value:"Example",id:"example-5",level:4},{value:"gRPC",id:"grpc",level:3},{value:"Example",id:"example-6",level:4}],d={toc:c};function g(e){var t=e.components,n=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"supported-routers"},"Supported Routers"),(0,a.kt)("h3",{id:"1-chi"},"1. Chi"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"r := chi.NewRouter()\nkchi.ChiV5(k,r)\n")),(0,a.kt)("h4",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'import("github.com/keploy/go-sdk/integrations/kchi")\n\nr := chi.NewRouter()\nport := "8080"\nk := keploy.New(keploy.Config{\n           App: keploy.AppConfig{\n               Name: "my_app",\n               Port: port,\n           },\n           Server: keploy.ServerConfig{\n               URL: "http://localhost:8081/api",\n           },\n         })\nkchi.ChiV5(k,r)\nhttp.ListenAndServe(":" + port, r)\n')),(0,a.kt)("h3",{id:"2-gin"},"2. Gin"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"r:=gin.New()\nkgin.GinV1(k, r)\n")),(0,a.kt)("h4",{id:"example-1"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'import("github.com/keploy/go-sdk/integrations/kgin/v1")\n\nr:=gin.New()\nport := "8080"\nk := keploy.New(keploy.Config{\n  App: keploy.AppConfig{\n      Name: "my_app",\n      Port: port,\n  },\n  Server: keploy.ServerConfig{\n      URL: "http://localhost:8081/api",\n  },\n})\nkgin.GinV1(k, r)\nr.Run(":" + port)\n')),(0,a.kt)("h3",{id:"3-echo"},"3. Echo"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"e := echo.New()\nkecho.EchoV4(k, e)\n")),(0,a.kt)("h4",{id:"example-2"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'import("github.com/keploy/go-sdk/integrations/kecho/v4")\n\ne := echo.New()\nport := "8080"\nk := keploy.New(keploy.Config{\n  App: keploy.AppConfig{\n      Name: "my-app",\n      Port: port,\n  },\n  Server: keploy.ServerConfig{\n      URL: "http://localhost:8081/api",\n  },\n})\nkecho.EchoV4(k, e)\ne.Start(":" + port)\n')),(0,a.kt)("h3",{id:"4-webgo"},"4. WebGo"),(0,a.kt)("h4",{id:"webgov4"},"WebGoV4"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"router := webgo.NewRouter(cfg, getRoutes())\nkwebgo.WebGoV4(k, router)\n")),(0,a.kt)("h4",{id:"webgov6"},"WebGoV6"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"kwebgo.WebGoV6(k, router)\nrouter.Start()\n")),(0,a.kt)("h4",{id:"example-3"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'import("github.com/keploy/go-sdk/integrations/kwebgo/v4")\n\nport := "8080"\nk := keploy.New(keploy.Config{\n  App: keploy.AppConfig{\n      Name: "my-app",\n      Port: port,\n  },\n  Server: keploy.ServerConfig{\n      URL: "http://localhost:8081/api",\n  },\n})\n\nkwebgo.WebGoV4(k\n\n, router)\nrouter.Start()\n')),(0,a.kt)("h3",{id:"5-gorillamux"},"5. Gorilla/Mux"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"r := mux.NewRouter()\nkmux.Mux(k, r)\n")),(0,a.kt)("h4",{id:"example-4"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'import( \n    "github.com/keploy/go-sdk/integrations/kmux"\n    "net/http"\n)\n\nr := mux.NewRouter()\nport := "8080"\nk := keploy.New(keploy.Config{\n  App: keploy.AppConfig{\n      Name: "my-app",\n      Port: port,\n  },\n  Server: keploy.ServerConfig{\n      URL: "http://localhost:8081/api",\n  },\n})\nkmux.Mux(k, r)\nhttp.ListenAndServe(":"+port, r)\n')),(0,a.kt)("h2",{id:"supported-databases"},"Supported Databases"),(0,a.kt)("h3",{id:"1-mongodb"},"1. MongoDB"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'import("github.com/keploy/go-sdk/integrations/kmongo")\n\ndb  := client.Database("testDB")\ncol := kmongo.NewCollection(db.Collection("Demo-Collection"))\n')),(0,a.kt)("p",null,"Following operations are supported:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"FindOne - Err and Decode method of mongo.SingleResult"),(0,a.kt)("li",{parentName:"ul"},"Find - Next, TryNext, Err, Close, All and Decode methods of mongo.cursor"),(0,a.kt)("li",{parentName:"ul"},"InsertOne"),(0,a.kt)("li",{parentName:"ul"},"InsertMany"),(0,a.kt)("li",{parentName:"ul"},"UpdateOne"),(0,a.kt)("li",{parentName:"ul"},"UpdateMany"),(0,a.kt)("li",{parentName:"ul"},"DeleteOne"),(0,a.kt)("li",{parentName:"ul"},"DeleteMany"),(0,a.kt)("li",{parentName:"ul"},"CountDocuments"),(0,a.kt)("li",{parentName:"ul"},"Distinct"),(0,a.kt)("li",{parentName:"ul"},"Aggregate - Next, TryNext, Err, Close, All and Decode methods of mongo.cursor")),(0,a.kt)("h3",{id:"2-dynamodb"},"2. DynamoDB"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'import("github.com/keploy/go-sdk/integrations/kddb")\n\nclient := kddb.NewDynamoDB(dynamodb.New(sess))\n')),(0,a.kt)("p",null,"Following operations are supported:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"QueryWithContext"),(0,a.kt)("li",{parentName:"ul"},"GetItemWithContext"),(0,a.kt)("li",{parentName:"ul"},"PutItemWithContext")),(0,a.kt)("h3",{id:"3-sql-driver"},"3. SQL Driver"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'import(\n    "github.com/keploy/go-sdk/integrations/ksql"\n    "github.com/lib/pq"\n)\n\nfunc init(){\n    driver := ksql.Driver{Driver: pq.Driver{}}\n    sql.Register("keploy", &driver)\n}\n')),(0,a.kt)("p",null,"Its compatible with gORM. Here is an example -"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'    pSQL_URI := fmt.Sprintf("host=%s user=%s dbname=%s sslmode=disable password=%s port=%s", "localhost", "postgres", "Book_Keeper", "8789", "5432")\n    // set DisableAutomaticPing to true for capturing and replaying the outputs of querries stored in requests context.\n    pSQL_DB, err :=  gorm.Open(postgres.New(postgres.Config{DriverName: "keploy", DSN: pSQL_URI}), &gorm.Config{ DisableAutomaticPing: true })\n    if err!=nil{\n        log.Fatal(err)\n    } else {\n    fmt.Println("Successfully connected to postgres")\n    }\n    r:=gin.New()\n    kgin.GinV1(kApp, r)\n    r.GET("/gin/:color/*type", func(c *gin.Context) {\n        // set the context of *gorm.DB with request\'s context of http Handler function before queries.\n        pSQL_DB = pSQL_DB.WithContext(r.Context())\n    // Find\n    var (\n        people []Book\n    )\n    x := pSQL_DB.Find(&people)\n    }))\n')),(0,a.kt)("h2",{id:"supported-clients"},"Supported Clients"),(0,a.kt)("h3",{id:"nethttp"},"net/http"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"khttpclient.NewHttpClient(&http.Client{})\n")),(0,a.kt)("h4",{id:"example-5"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'import("github.com/keploy/go-sdk/integrations/khttpclient")\n\nfunc(w http.ResponseWriter, r *http.Request){\n    client := khttpclient.NewHttpClient(&http.Client{})\n// ensure to add request context to all outgoing http requests  \n    client.SetCtxHttpClient(r.Context())\n    resp, err := client.Get("https://example.com")\n}\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note"),": ensure to add pass request context to all external requests like http requests, db calls, etc."),(0,a.kt)("h3",{id:"grpc"},"gRPC"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"conn, err := grpc.Dial(address, grpc.WithInsecure(), kgrpc.WithClientUnaryInterceptor(k))\n")),(0,a.kt)("h4",{id:"example-6"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'import("github.com/keploy/go-sdk/integrations/kgrpc")\n\nport := "8080"\nk := keploy.New(keploy.Config{\n  App: keploy.AppConfig{\n      Name: "my-app",\n      Port: port,\n  },\n  Server: keploy.ServerConfig{\n      URL: "http://localhost:8081/api",\n  },\n})\n\nconn, err := grpc.Dial(address, grpc.WithInsecure(), kgrpc.WithClientUnaryInterceptor(k))\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note"),": Currently streaming is not yet supported."))}g.isMDXComponent=!0}}]);